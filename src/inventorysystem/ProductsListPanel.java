/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package inventorysystem;

import java.awt.Color;
import java.awt.Font;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import javax.swing.table.JTableHeader;
import net.proteanit.sql.DbUtils;

/**
 *
 * @author Rovelyn
 */
public class ProductsListPanel extends javax.swing.JPanel {

    /** Creates new form ProductsListPanel */
    public ProductsListPanel() {
        initComponents();
        showTableData();
    }

    Connection connect = null;
    PreparedStatement statement = null;
    ResultSet result = null;
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        productListTable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        sorting = new javax.swing.JComboBox<>();
        wordSearch = new javax.swing.JTextField();
        searchItemBy = new javax.swing.JComboBox<>();
        refresh = new javax.swing.JButton();
        descending = new javax.swing.JCheckBox();
        jLabel2 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(52, 73, 94));
        setForeground(new java.awt.Color(242, 243, 244));
        setLayout(null);

        productListTable.setBackground(new java.awt.Color(52, 73, 94));
        productListTable.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        productListTable.setFont(new java.awt.Font("Courier New", 1, 16)); // NOI18N
        productListTable.setForeground(new java.awt.Color(242, 243, 244));
        productListTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "ID", "NAME", "CATEGORY", "QUANTITY", "PRICE"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        productListTable.setToolTipText("");
        productListTable.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        productListTable.setEnabled(false);
        productListTable.setGridColor(new java.awt.Color(0, 204, 204));
        productListTable.setRowHeight(20);
        productListTable.setSelectionBackground(new java.awt.Color(106, 98, 107));
        productListTable.setSelectionForeground(new java.awt.Color(255, 64, 226));
        productListTable.getTableHeader().setResizingAllowed(false);
        productListTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(productListTable);

        add(jScrollPane1);
        jScrollPane1.setBounds(160, 10, 580, 439);

        jLabel1.setBackground(new java.awt.Color(52, 73, 94));
        jLabel1.setFont(new java.awt.Font("Courier New", 1, 16)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(242, 243, 244));
        jLabel1.setText("SEARCH  :");
        add(jLabel1);
        jLabel1.setBounds(10, 70, 110, 21);

        sorting.setBackground(new java.awt.Color(52, 73, 94));
        sorting.setFont(new java.awt.Font("Courier New", 1, 15)); // NOI18N
        sorting.setForeground(new java.awt.Color(242, 243, 244));
        sorting.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "ID", "NAME", "CATEGORY", "QUANTITY", "PRICE" }));
        sorting.setToolTipText("");
        sorting.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sortingActionPerformed(evt);
            }
        });
        add(sorting);
        sorting.setBounds(10, 240, 140, 39);

        wordSearch.setBackground(new java.awt.Color(52, 73, 94));
        wordSearch.setFont(new java.awt.Font("Courier New", 1, 15)); // NOI18N
        wordSearch.setForeground(new java.awt.Color(242, 243, 244));
        wordSearch.setToolTipText("ENTER ITEM TO BE SEARCH");
        wordSearch.setCaretColor(new java.awt.Color(255, 0, 7));
        wordSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                wordSearchKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                wordSearchKeyTyped(evt);
            }
        });
        add(wordSearch);
        wordSearch.setBounds(10, 100, 140, 36);

        searchItemBy.setBackground(new java.awt.Color(52, 73, 94));
        searchItemBy.setFont(new java.awt.Font("Courier New", 1, 15)); // NOI18N
        searchItemBy.setForeground(new java.awt.Color(242, 243, 244));
        searchItemBy.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "ID", "NAME", "CATEGORY", "QUANTITY", "PRICE" }));
        searchItemBy.setToolTipText("");
        searchItemBy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchItemByActionPerformed(evt);
            }
        });
        add(searchItemBy);
        searchItemBy.setBounds(10, 150, 140, 39);

        refresh.setBackground(new java.awt.Color(0, 204, 204));
        refresh.setFont(new java.awt.Font("Courier New", 1, 16)); // NOI18N
        refresh.setForeground(new java.awt.Color(0, 0, 0));
        refresh.setText("REFRESH");
        refresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshActionPerformed(evt);
            }
        });
        add(refresh);
        refresh.setBounds(10, 340, 140, 40);

        descending.setBackground(new java.awt.Color(52, 73, 94));
        descending.setFont(new java.awt.Font("Courier New", 1, 16)); // NOI18N
        descending.setForeground(new java.awt.Color(242, 243, 244));
        descending.setText("DESCENDING");
        descending.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                descendingActionPerformed(evt);
            }
        });
        add(descending);
        descending.setBounds(10, 290, 140, 30);

        jLabel2.setBackground(new java.awt.Color(52, 73, 94));
        jLabel2.setFont(new java.awt.Font("Courier New", 1, 16)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(242, 243, 244));
        jLabel2.setText("SORT BY  :");
        add(jLabel2);
        jLabel2.setBounds(10, 210, 110, 21);
    }// </editor-fold>//GEN-END:initComponents

    private void sortingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sortingActionPerformed
        sortTable();
    }//GEN-LAST:event_sortingActionPerformed

    private void searchItemByActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchItemByActionPerformed
        searchItem();
    }//GEN-LAST:event_searchItemByActionPerformed

    private void refreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshActionPerformed
        showTableData();
        wordSearch.setText("");
        searchItemBy.setSelectedIndex(0);
        sorting.setSelectedIndex(0);
        descending.setSelected(false);
    }//GEN-LAST:event_refreshActionPerformed

    private void descendingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_descendingActionPerformed
        sortTable();
    }//GEN-LAST:event_descendingActionPerformed

    private void wordSearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_wordSearchKeyReleased
        searchItem();
    }//GEN-LAST:event_wordSearchKeyReleased

    private void wordSearchKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_wordSearchKeyTyped
        searchItem();
    }//GEN-LAST:event_wordSearchKeyTyped

    public void showTableData(){
        
        JTableHeader header = productListTable.getTableHeader();
        header.setBackground(new Color(52, 73, 94));
        header.setForeground(new Color(242, 243, 244));
        header.setFont(new Font("Courier New", Font.BOLD, 15));
        
        try{
            connect = DriverManager.getConnection("jdbc:mysql://localhost/inventory_system_java", "root", "");
            statement = connect.prepareStatement("SELECT * FROM db_inventory");
            ResultSet result = statement.executeQuery();
            productListTable.setModel(DbUtils.resultSetToTableModel(result));
        }catch(SQLException ex){
            JOptionPane.showMessageDialog(null, "ERROR IN DATABASE!");
        }
    }
    
    private void sortTable(){
        try{
            connect = DriverManager.getConnection("jdbc:mysql://localhost/inventory_system_java", "root", "");
//            statement = connect.prepareStatement("SELECT * FROM db_inventory");
            switch (sorting.getSelectedIndex()) {
                case 0:
                    if(descending.isSelected()){
                        statement = connect.prepareStatement("SELECT * FROM db_inventory ORDER BY ID DESC");
                    }else{
                        statement = connect.prepareStatement("SELECT * FROM db_inventory ORDER BY ID");
                    }
                    break;
                case 1:
                    if(descending.isSelected()){
                        statement = connect.prepareStatement("SELECT * FROM db_inventory ORDER BY NAME DESC");
                    }else{
                        statement = connect.prepareStatement("SELECT * FROM db_inventory ORDER BY NAME");
                    }
                    break;
                case 2:
                    if(descending.isSelected()){
                        statement = connect.prepareStatement("SELECT * FROM db_inventory ORDER BY CATEGORY DESC");
                    }else{
                        statement = connect.prepareStatement("SELECT * FROM db_inventory ORDER BY CATEGORY");
                    }
                    break;
                case 3:
                    if(descending.isSelected()){
                        statement = connect.prepareStatement("SELECT * FROM db_inventory ORDER BY QUANTITY DESC");
                    }else{
                        statement = connect.prepareStatement("SELECT * FROM db_inventory ORDER BY QUANTITY");
                    }
                    break;
                case 4:
                    if(descending.isSelected()){
                        statement = connect.prepareStatement("SELECT * FROM db_inventory ORDER BY PRICE DESC");
                    }else{
                        statement = connect.prepareStatement("SELECT * FROM db_inventory ORDER BY PRICE");
                    }
                    break;
                default:
                    if(descending.isSelected()){
                        statement = connect.prepareStatement("SELECT * FROM db_inventory ORDER BY ID DESC");
                    }else{
                        statement = connect.prepareStatement("SELECT * FROM db_inventory");
                    }
                    break;
            }
            ResultSet result = statement.executeQuery();
            productListTable.setModel(DbUtils.resultSetToTableModel(result));
        }catch(SQLException ex){
            JOptionPane.showMessageDialog(null, "ERROR IN DATABASE!");
        }
    }
    
    private void searchItem(){
            try{
                connect = DriverManager.getConnection("jdbc:mysql://localhost/inventory_system_java", "root", "");
//                statement = connect.prepareStatement("SELECT * FROM db_inventory WHERE " + type + "=?");
                    switch (searchItemBy.getSelectedItem().toString()) {
                        case "ID":
                            statement = connect.prepareStatement("SELECT * FROM db_inventory WHERE ID=?");
                            break;
                        case "NAME":
                            statement = connect.prepareStatement("SELECT * FROM db_inventory WHERE NAME=?");
                            break;
                        case "CATEGORY":
                            statement = connect.prepareStatement("SELECT * FROM db_inventory WHERE CATEGORY=?");
                            break;
                        case "QUANTITY":
                            statement = connect.prepareStatement("SELECT * FROM db_inventory WHERE QUANTITY=?");
                            break;
                        case "PRICE":
                            statement = connect.prepareStatement("SELECT * FROM db_inventory WHERE PRICE=?");
                            break;
                        default:
                            statement = connect.prepareStatement("SELECT * FROM db_inventory");
                            break;
                    }
                statement.setString(1, wordSearch.getText());
                ResultSet result = statement.executeQuery();
                productListTable.setModel(DbUtils.resultSetToTableModel(result));
            }catch(SQLException ex){
                JOptionPane.showMessageDialog(null, "ERROR IN DATABASE!");
            }
        
    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox descending;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable productListTable;
    private javax.swing.JButton refresh;
    private javax.swing.JComboBox<String> searchItemBy;
    private javax.swing.JComboBox<String> sorting;
    private javax.swing.JTextField wordSearch;
    // End of variables declaration//GEN-END:variables

}
